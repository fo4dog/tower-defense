import pygame
import time

class Enemy:
    def __init__(self, x, y, maxHP, turn):
        self.x = x
        self.y = y
        self.hp = maxHP
        self.maxHP = maxHP
        self.turn = turn

    def draw(self):
        pygame.draw.rect(screen, WHITE, (self.x*side_x, self.y*side_y, side_x, side_y))
        pygame.draw.line(screen, RED, [self.x*side_x, self.y*side_y - 5], [self.x*side_x + (side_x / self.maxHP * self.hp), self.y*side_y - 5], 3)
#--------------------------
pygame.init()
clock = pygame.time.Clock()

screen_height = 800
screen_width = 1000

side_x = screen_width // 20
side_y = screen_height // 16

f1 = pygame.font.Font(None, 36)

size = [screen_width, screen_height]
screen = pygame.display.set_mode(size)

pygame.display.set_caption("Tower Defense 1.0")

BLACK = [0, 0, 0]
WHITE = [255, 255, 255]
GREEN = [32, 58, 39]
GRAY = [128, 128, 128]
RED = [255, 0, 0]
YELLOW = [247, 242, 26]

screen.fill((0,250,154))

flag = False

fakeTimer = 60

description1 = f1.render('Uhh, hello? You are playing in Tower Defense 1.0', 1, WHITE)
screen.blit(description1, (100, 100))

description1 = f1.render('GREEN SQUARE- FIELD', 1, GREEN)
screen.blit(description1, (100 + side_x, 150))
pygame.draw.rect(screen, GREEN, (100, 150, side_x, side_y))

description1 = f1.render('GRAY SQUARE- ROAD FOR ENEMIES', 1, GRAY)
screen.blit(description1, (100 + side_x, 200))
pygame.draw.rect(screen, GRAY, (100, 200, side_x, side_y))

description1 = f1.render('BLACK SQUARE- PLACE FOR TURRETS', 1, BLACK)
screen.blit(description1, (100 + side_x, 250))
pygame.draw.rect(screen, BLACK, (100, 250, side_x, side_y))

description1 = f1.render('RED SQUARE- START', 1, RED)
screen.blit(description1, (100 + side_x, 300))
pygame.draw.rect(screen, RED, (100, 300, side_x, side_y))

description1 = f1.render('RED SQUARE- FINISH', 1, YELLOW)
screen.blit(description1, (100 + side_x, 350))
pygame.draw.rect(screen, YELLOW, (100, 350, side_x, side_y))

description1 = f1.render('WHITE CIRCLE- TURRET', 1, WHITE)
screen.blit(description1, (100 + side_x, 410))
pygame.draw.circle(screen, WHITE, (100 + side_x//2, 400 + (side_y//2)), (side_x//2), 2)

description1 = f1.render('Mm, that\'s all. Good luck, have fun!', 1, WHITE)
screen.blit(description1, (100, 500))

pygame.display.flip()

while not flag:
    for i in pygame.event.get():
        if i.type == pygame.MOUSEBUTTONUP:
            flag = True

field = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4],
         [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 0],
         [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 0],
         [2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]]#where 0 - ground 1 - road 2 - place for turret 3 - start 4 - finish 5 - turret
#--------------------------
healths = 5
money = 600
level = 1

isUpgradesIsDrawing = False
upgradeCoords = [0, 0]
deleteCoords = [0, 0]

maxEnemyHealts = 3

start = [0, 15]#start coordinates

moves = [[1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0],
         [0, -1], [0, -1], [0, -1], [0, -1], [0, -1], [0, -1], [0, -1], [0, -1],
         [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0],
         [0, -1], [0, -1], [0, -1], [0, -1], [0, -1], [0, -1],
         [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0],
         [0, 1], [1, 0], [1, 0], [0, -1], [1, 0], [1, 0],
         [0, 1], [1, 0], [1, 0], [0, -1], [1, 0], [1, 0],
         [1, 0], [0, -1], [1, 0]]

turrets = []

enemyCount = 5

enemies = []

enemies.append(Enemy(start[0], start[1], maxEnemyHealts, 0))

enemyCount -= 1

iterator = -1
#--------------------------
#section for turret pages
pageX = 17 * side_x
pageY = 4 * side_y

isPageMoving = False
#--------------------------
for y in range(0, 16):
        for x in range(0, 20):
            if field[y][x] == 0:
                colorr = GREEN
            elif field[y][x] == 1:
                colorr = GRAY
            elif field[y][x] == 2:
                colorr = BLACK
            elif field[y][x] == 3:
                colorr = RED
            elif field[y][x] == 4:
                colorr = YELLOW
            elif field[y][x] == 5:
                colorr = BLACK
                
            pygame.draw.rect(screen, colorr, (x*side_x, y*side_y, side_x, side_y))
#--------------------------
done = False

while not done:
    for i in pygame.event.get():
        if i.type == pygame.QUIT: done = True

        elif i.type == pygame.MOUSEBUTTONDOWN:
            pos = pygame.mouse.get_pos()
            x_cell = int(pos[0]//side_x)
            y_cell = int(pos[1]//side_y)
            
            if x_cell == pageX // side_x and y_cell == pageY // side_y:
                isPageMoving = True

            if field[y_cell][x_cell] == 5:
                
                for i in range(0, len(turrets)):
                    if turrets[i][0] == x_cell and turrets[i][1] == y_cell:
                        isUpgradesIsDrawing = True
                        upgradeCoords = [int((x_cell - 1)*side_x), int((y_cell + 1)*side_y)]
                        deleteCoords = [(x_cell + 1)*side_x, (y_cell + 1)*side_y]
                        turretIndex = i
                        break

            if x_cell*side_x == deleteCoords[0] and y_cell*side_y == deleteCoords[1] and isUpgradesIsDrawing == True:
                turrets.pop(turretIndex)
                field[y_cell-1][x_cell-1] = 2
                isUpgradesIsDrawing = False
            elif x_cell*side_x == upgradeCoords[0] and y_cell*side_y == upgradeCoords[1] and isUpgradesIsDrawing == True:
                if money >= 300:
                    turrets[turretIndex][2] += 1
                    money -= 300
                isUpgradesIsDrawing = False

            
                    
        
            
        elif i.type == pygame.MOUSEBUTTONUP:
            pos = pygame.mouse.get_pos()
            x_cell = int(pos[0]//side_x)
            y_cell = int(pos[1]//side_y)

            if isPageMoving == True:
                isPageMoving = False

                if field[pageY//side_y][pageX//side_x] == 2 and money >= 300:
                    field[pageY//side_y][pageX//side_x] = 5
                    turrets.append([pageX//side_x, pageY//side_y, 1])
                    money -= 300
                    pageX = 17 * side_x
                    pageY = 4 * side_y
                else:
                    pageX = 17 * side_x
                    pageY = 4 * side_y
                    

        elif i.type == pygame.MOUSEMOTION:
            if isPageMoving == True:
                pos = pygame.mouse.get_pos()

                pageX = int(pos[0])
                pageY = int(pos[1])

            
    
    screen.fill((255,255,255))
    
    for y in range(0, 16):
        for x in range(0, 20):
            if field[y][x] == 0:
                colorr = GREEN
            elif field[y][x] == 1:
                colorr = GRAY
            elif field[y][x] == 2:
                colorr = BLACK
            elif field[y][x] == 3:
                colorr = RED
            elif field[y][x] == 4:
                colorr = YELLOW
            elif field[y][x] == 5:
                colorr = BLACK
                
            pygame.draw.rect(screen, colorr, (x*side_x, y*side_y, side_x, side_y))

    #--------------------------
    #drawing turret drag-n-drop images
    pygame.draw.rect(screen, BLACK, (pageX, pageY, side_x, side_y))
    pygame.draw.circle(screen, WHITE, (pageX + (side_x//2), pageY + (side_y//2)), (side_x//2), 1)
    #--------------------------

    if fakeTimer == 0:
        for i in enemies:
            if i.turn <= len(moves)-1: 
                i.x += moves[i.turn][0]
                i.y += moves[i.turn][1]
                i.turn += 1
                if i.turn == len(moves) - 1:
                    healths -= 1
    
        for i in turrets:
            pygame.draw.circle(screen, WHITE, (i[0]*side_x + (side_x//2), i[1]*side_y + (side_y//2)), (side_x//2), 1)
            for j in enemies:
                if abs(i[0] - j.x) <= 1 and abs(i[1] - j.y) <= 1:
                    j.hp -= i[2]
                    
                    if j.hp <= 0:
                        enemies.remove(j)
                        money += 100
                    break

        if iterator < 1:
            iterator += 1
        else:
            iterator = 0

            if enemyCount >= 1:
                enemies.append(Enemy(start[0] + 1, start[1], maxEnemyHealts, 1))
                enemyCount -= 1

    for i in enemies:
        i.draw()
    for i in turrets:
        pygame.draw.circle(screen, WHITE, (i[0]*side_x + (side_x//2), i[1]*side_y + (side_y//2)), (side_x//2), 1)

    if isUpgradesIsDrawing == True:
        pygame.draw.rect(screen, WHITE, (upgradeCoords[0], upgradeCoords[1], side_x, side_y))
        pygame.draw.polygon(screen, BLACK, [[upgradeCoords[0] + side_x//10*4, upgradeCoords[1] + side_y//10*9],
                                             [upgradeCoords[0] + side_x//10*6, upgradeCoords[1] + side_y//10*9],
                                             [upgradeCoords[0] + side_x//10*6, upgradeCoords[1] + side_y//10*4],
                                             [upgradeCoords[0] + side_x//10*8, upgradeCoords[1] + side_y//10*4],
                                             [upgradeCoords[0] + side_x//10*5, upgradeCoords[1] + side_y//10*1],
                                             [upgradeCoords[0] + side_x//10*2, upgradeCoords[1] + side_y//10*4],
                                             [upgradeCoords[0] + side_x//10*4, upgradeCoords[1] + side_y//10*4],
                                             [upgradeCoords[0] + side_x//10*4, upgradeCoords[1] + side_y//10*9]])
        
        pygame.draw.rect(screen, WHITE, (deleteCoords[0], deleteCoords[1], side_x, side_y))
        pygame.draw.line(screen, RED, [deleteCoords[0]+side_x/7, deleteCoords[1]+side_y/7], [deleteCoords[0]+side_x/7*6, deleteCoords[1]+side_y/7*6], 3)
        pygame.draw.line(screen, RED, [deleteCoords[0]+side_x/7, deleteCoords[1]+side_y/7*6], [deleteCoords[0]+side_x/7*6, deleteCoords[1]+side_y/7], 3)

        
    moneyValue = f1.render('Money: '+ str(money), 1, WHITE)
    screen.blit(moneyValue, (0, 0))

    levelValue = f1.render('Level: '+ str(level), 1, WHITE)
    screen.blit(levelValue, (200, 0))

    healthsValue = f1.render('healths: '+ str(healths), 1, WHITE)
    screen.blit(healthsValue, (400, 0))

    #if healths <= 0:
        #done = True
        #print("You lose")

        
    if fakeTimer == 0:
        fakeTimer = 60
    else:
        fakeTimer -= 1
        
    if len(enemies) == 0 and level == 1:
        enemyCount += 6
        level += 1
        enemies.append(Enemy(start[0], start[1], 3, 0))
        maxEnemyHealts = 5
        iterator = -1
    elif len(enemies) == 0 and level == 2:
        enemyCount += 9
        level += 1
        enemies.append(Enemy(start[0], start[1], 3, 0))
        maxEnemyHealts = 7
        iterator = -1
    elif len(enemies) == 0 and level == 3:
        level = "Victory!"
        print("You win!")
        done = True
        
    pygame.display.flip()
    clock.tick(60)
    
pygame.quit()
