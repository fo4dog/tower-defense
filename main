import pygame
import time
import random
#--------------------------
class Enemy:
    def __init__(self, x, y, maxHP, turn):
        self.x = x
        self.y = y
        self.hp = maxHP
        self.maxHP = maxHP
        self.turn = turn

    def draw(self):
        pygame.draw.rect(screen, WHITE, (self.x*side_x, self.y*side_y, side_x, side_y))
        pygame.draw.line(screen, RED, [self.x*side_x, self.y*side_y - 5], [self.x*side_x + (side_x / self.maxHP * self.hp), self.y*side_y - 5], 3)

class FireworkPart:
    def __init__(self, x, y, color):
        self.x = x
        self.y = y
        self.color = color

    def move(self, dx, dy):
        self.x += dx
        self.y += dy

    def draw(self):
        pygame.draw.rect(screen, self.color, (self.x, self.y, 10, 10))        
#--------------------------
#technical variables
pygame.init()
clock = pygame.time.Clock()

screen_height = 800
screen_width = 1000

side_x = screen_width // 20
side_y = screen_height // 16

f1 = pygame.font.Font(None, 36)

size = [screen_width, screen_height]
screen = pygame.display.set_mode(size)

pygame.display.set_caption("Tower Defense 1.0")

BLACK = [0, 0, 0]
WHITE = [255, 255, 255]
GREEN = [32, 58, 39]
GRAY = [128, 128, 128]
RED = [255, 0, 0]
YELLOW = [247, 242, 26]
BLUE = [135, 206, 250]

screen.fill((0,250,154))

flag = False

fakeTimer = 60 #with this timer we can drag icons without lags
#--------------------------
#description
description1 = f1.render('Uhh, hello? You are playing in Tower Defense 1.0', 1, WHITE)
screen.blit(description1, (100, 100))

description1 = f1.render('GREEN SQUARE- FIELD', 1, GREEN)
screen.blit(description1, (100 + side_x, 150))
pygame.draw.rect(screen, GREEN, (100, 150, side_x, side_y))

description1 = f1.render('GRAY SQUARE- ROAD FOR ENEMIES', 1, GRAY)
screen.blit(description1, (100 + side_x, 200))
pygame.draw.rect(screen, GRAY, (100, 200, side_x, side_y))

description1 = f1.render('BLACK SQUARE- PLACE FOR TURRETS', 1, BLACK)
screen.blit(description1, (100 + side_x, 250))
pygame.draw.rect(screen, BLACK, (100, 250, side_x, side_y))

description1 = f1.render('RED SQUARE- START', 1, RED)
screen.blit(description1, (100 + side_x, 300))
pygame.draw.rect(screen, RED, (100, 300, side_x, side_y))

description1 = f1.render('RED SQUARE- FINISH', 1, YELLOW)
screen.blit(description1, (100 + side_x, 350))
pygame.draw.rect(screen, YELLOW, (100, 350, side_x, side_y))

description1 = f1.render('WHITE CIRCLE- TURRET', 1, WHITE)
screen.blit(description1, (100 + side_x, 410))
pygame.draw.circle(screen, WHITE, (100 + side_x//2, 400 + (side_y//2)), (side_x//2), 2)

description1 = f1.render('YELLOW CIRCLE- TURRET TOO))', 1, YELLOW)
screen.blit(description1, (100 + side_x, 470))
pygame.draw.circle(screen, YELLOW, (100 + side_x//2, 460 + (side_y//2)), (side_x//2), 2)

pygame.display.flip()

while not flag:
    for i in pygame.event.get():
        if i.type == pygame.MOUSEBUTTONUP:
            flag = True

screen.fill((0,250,154))

description1 = f1.render('Now a little about the gameplay:', 1, WHITE)
screen.blit(description1, (10, 100))

description1 = f1.render('To put a turret - click on it and drag it into place for the turret', 1, GREEN)
screen.blit(description1, (10, 150))

description1 = f1.render('To upgrade or remove turret - click on the turret', 1, GRAY)
screen.blit(description1, (10, 200))

description1 = f1.render('If you do not have enough money - click on the upgrade icon, nothing will happen', 1, BLACK)
screen.blit(description1, (10, 250))

description1 = f1.render('The cost of the turret is 300 coins, upgrade - 500 coins. Upgrade gives + to damage', 1, RED)
screen.blit(description1, (10, 300))

description1 = f1.render('White turret shoots at one enemy, but has high damage', 1, YELLOW)
screen.blit(description1, (10, 350))

description1 = f1.render('The yellow turret shoots all enemies in its field of view, but has little damage', 1, YELLOW)
screen.blit(description1, (10, 400))

description1 = f1.render('Four waves and final boss. Good luck :)', 1, YELLOW)
screen.blit(description1, (10, 450))

pygame.display.flip()

flag = False
while not flag:
    for i in pygame.event.get():
        if i.type == pygame.MOUSEBUTTONUP:
            flag = True

#--------------------------
#game variables
field = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4],
         [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 0],
         [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 0],
         [2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]]#where 0 - ground 1 - road 2 - place for turret 3 - start 4 - finish 5 - turret(rocket)

healths = 3
money = 600
wave = 1

isUpgradesIsDrawing = False #if this variable is true, upgrade/delete icons is drawing under turret
upgradeCoords = [0, 0] #coordinates of upgrade icon
deleteCoords = [0, 0] #coordinates of delete icon

maxEnemyHealts = 3

start = [0, 15]#start coordinates

moves = [[1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0],
         [0, -1], [0, -1], [0, -1], [0, -1], [0, -1], [0, -1], [0, -1], [0, -1],
         [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0], [-1, 0],
         [0, -1], [0, -1], [0, -1], [0, -1], [0, -1], [0, -1],
         [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0],
         [0, 1], [1, 0], [1, 0], [0, -1], [1, 0], [1, 0],
         [0, 1], [1, 0], [1, 0], [0, -1], [1, 0], [1, 0],
         [1, 0], [0, -1], [1, 0]] #plus to enemies x and y steps (squares) from field

turrets = []

enemyCount = 5 #enemies on wave

enemies = []

enemies.append(Enemy(start[0], start[1], maxEnemyHealts, 0))

enemyCount -= 1

iterator = -1 #every loop this variable is increasing, when = 1, spawn the enemy (if enemyCount > 0) and reset to zero
#--------------------------
#section for turret pages
pages = [] #2 pages, 2 icons of turrets
pages.append([17 * side_x, 4 * side_y, False]) #icon of white turret
pages.append([17 * side_x, 7 * side_y, False]) #icon of yellow turret

pageIndex = 0 #white(=0) or yellow(=1) icon is moving
#--------------------------
#field draw
for y in range(0, 16):
        for x in range(0, 20):
            if field[y][x] == 0:
                colorr = GREEN
            elif field[y][x] == 1:
                colorr = GRAY
            elif field[y][x] == 2:
                colorr = BLACK
            elif field[y][x] == 3:
                colorr = RED
            elif field[y][x] == 4:
                colorr = YELLOW
            elif field[y][x] == 5:
                colorr = BLACK
                
            pygame.draw.rect(screen, colorr, (x*side_x, y*side_y, side_x, side_y))
#--------------------------
#game cycle
done = True

while not done:
    for i in pygame.event.get():
        if i.type == pygame.QUIT: done = True

        elif i.type == pygame.MOUSEBUTTONDOWN:
            pos = pygame.mouse.get_pos()
            x_cell = int(pos[0]//side_x)
            y_cell = int(pos[1]//side_y)

            #--------------------------
            #click on turret page handler
            if x_cell == pages[0][0] // side_x and y_cell == pages[0][1] // side_y:
                pageIndex = 0
                pages[0][2] = True
            elif x_cell == pages[1][0] // side_x and y_cell == pages[1][1] // side_y:
                pageIndex = 1
                pages[1][2] = True
            #--------------------------
            #turret upgrade/delete section
            if field[y_cell][x_cell] == 5:
                
                for i in range(0, len(turrets)):
                    if turrets[i][0] == x_cell and turrets[i][1] == y_cell:
                        isUpgradesIsDrawing = True
                        upgradeCoords = [int((x_cell - 1)*side_x), int((y_cell + 1)*side_y)]
                        deleteCoords = [(x_cell + 1)*side_x, (y_cell + 1)*side_y]
                        turretIndex = i
                        break

            if x_cell*side_x == deleteCoords[0] and y_cell*side_y == deleteCoords[1] and isUpgradesIsDrawing == True:
                turrets.pop(turretIndex)
                field[y_cell-1][x_cell-1] = 2
                isUpgradesIsDrawing = False
            elif x_cell*side_x == upgradeCoords[0] and y_cell*side_y == upgradeCoords[1] and isUpgradesIsDrawing == True:
                if money >= 500:
                    turrets[turretIndex][2] += 1
                    money -= 500
                isUpgradesIsDrawing = False
            #--------------------------
            
                    
        
            
        elif i.type == pygame.MOUSEBUTTONUP:
            pos = pygame.mouse.get_pos()
            x_cell = int(pos[0]//side_x)
            y_cell = int(pos[1]//side_y)

            if pages[pageIndex][2] == True:
                pages[pageIndex][2] = False

                #--------------------------
                #add turret 
                if field[pages[pageIndex][1]//side_y][pages[pageIndex][0]//side_x] == 2 and money >= 300:
                    field[pages[pageIndex][1]//side_y][pages[pageIndex][0]//side_x] = 5

                    if pageIndex == 0:
                        turrets.append([pages[pageIndex][0]//side_x, pages[pageIndex][1]//side_y, 1, WHITE])
                    elif pageIndex == 1:
                        turrets.append([pages[pageIndex][0]//side_x, pages[pageIndex][1]//side_y, 0.3, YELLOW])
                        
                    money -= 300
                #--------------------------
                #return icon of the turret to the initial place
                    pages[pageIndex][0] = 17 * side_x
                    if pageIndex == 0:
                        pages[pageIndex][1] = 4 * side_y
                    elif pageIndex == 1:
                        pages[pageIndex][1] = 7 * side_y
                else:
                    pages[pageIndex][0] = 17 * side_x
                    if pageIndex == 0:
                        pages[pageIndex][1] = 4 * side_y
                    elif pageIndex == 1:
                        pages[pageIndex][1] = 7 * side_y
                #--------------------------  
        #icon moving
        elif i.type == pygame.MOUSEMOTION:
            if pages[pageIndex][2]== True:
                pos = pygame.mouse.get_pos()

                pages[pageIndex][0] = int(pos[0])
                pages[pageIndex][1] = int(pos[1])

            
    
    screen.fill((255,255,255))
    #--------------------------
    #field draw
    for y in range(0, 16):
        for x in range(0, 20):
            if field[y][x] == 0:
                colorr = GREEN
            elif field[y][x] == 1:
                colorr = GRAY
            elif field[y][x] == 2:
                colorr = BLACK
            elif field[y][x] == 3:
                colorr = RED
            elif field[y][x] == 4:
                colorr = YELLOW
            elif field[y][x] == 5:
                colorr = BLACK
                
            pygame.draw.rect(screen, colorr, (x*side_x, y*side_y, side_x, side_y))
            

    #--------------------------
    #drawing turret drag-n-drop images
    pygame.draw.rect(screen, BLACK, (pages[0][0], pages[0][1], side_x, side_y))
    pygame.draw.circle(screen, WHITE, (pages[0][0] + (side_x//2), pages[0][1] + (side_y//2)), (side_x//2), 1)

    pygame.draw.rect(screen, BLACK, (pages[1][0], pages[1][1], side_x, side_y))
    pygame.draw.circle(screen, YELLOW, (pages[1][0] + (side_x//2), pages[1][1] + (side_y//2)), (side_x//2), 1)
    #--------------------------
    #draw turrets and enemies
    if fakeTimer == 0:
        for i in enemies:
            if i.turn <= len(moves)-1: 
                i.x += moves[i.turn][0]
                i.y += moves[i.turn][1]
                i.turn += 1
                if i.turn == len(moves) - 1:
                    if wave == 5:
                        healths = 0
                    else:
                        healths -= 1
    
        for i in turrets:
            pygame.draw.circle(screen, i[3], (i[0]*side_x + (side_x//2), i[1]*side_y + (side_y//2)), (side_x//2), 1)
            for j in enemies:
                if i[3] == [255, 255, 255]:
                    turretDamageRange = 1
                else:
                    turretDamageRange = 2
                if abs(i[0] - j.x) <= turretDamageRange and abs(i[1] - j.y) <= turretDamageRange:
                    j.hp -= i[2]

                    if i[3] == [247, 242, 26]:
                        pygame.draw.line(screen, BLUE, [i[0]*side_x + (side_x//2), i[1]*side_y + (side_y//2)], [j.x*side_x + (side_x//2), j.y*side_y + (side_y//2)], 10)
                    
                    if j.hp <= 0:
                        enemies.remove(j)
                        if wave == 1:
                            money += 100
                        elif wave == 2:
                            money += 120
                        elif wave == 3:
                            money += 150
                        elif wave == 4:
                            money += 200
                            
                    if i[3] == [255, 255, 255]:
                        break

        if iterator < 1:
            iterator += 1
        else:
            iterator = 0

            if enemyCount >= 1:
                enemies.append(Enemy(start[0] + 1, start[1], maxEnemyHealts, 1))
                enemyCount -= 1

    for i in enemies:
        i.draw()
    for i in turrets:
        pygame.draw.circle(screen, i[3], (i[0]*side_x + (side_x//2), i[1]*side_y + (side_y//2)), (side_x//2), 1)
    #--------------------------
    #upgrade/delete icons draw
    if isUpgradesIsDrawing == True:
        pygame.draw.rect(screen, WHITE, (upgradeCoords[0], upgradeCoords[1], side_x, side_y))
        pygame.draw.polygon(screen, BLACK, [[upgradeCoords[0] + side_x//10*4, upgradeCoords[1] + side_y//10*9],
                                             [upgradeCoords[0] + side_x//10*6, upgradeCoords[1] + side_y//10*9],
                                             [upgradeCoords[0] + side_x//10*6, upgradeCoords[1] + side_y//10*4],
                                             [upgradeCoords[0] + side_x//10*8, upgradeCoords[1] + side_y//10*4],
                                             [upgradeCoords[0] + side_x//10*5, upgradeCoords[1] + side_y//10*1],
                                             [upgradeCoords[0] + side_x//10*2, upgradeCoords[1] + side_y//10*4],
                                             [upgradeCoords[0] + side_x//10*4, upgradeCoords[1] + side_y//10*4],
                                             [upgradeCoords[0] + side_x//10*4, upgradeCoords[1] + side_y//10*9]])
        
        pygame.draw.rect(screen, WHITE, (deleteCoords[0], deleteCoords[1], side_x, side_y))
        pygame.draw.line(screen, RED, [deleteCoords[0]+side_x/7, deleteCoords[1]+side_y/7], [deleteCoords[0]+side_x/7*6, deleteCoords[1]+side_y/7*6], 3)
        pygame.draw.line(screen, RED, [deleteCoords[0]+side_x/7, deleteCoords[1]+side_y/7*6], [deleteCoords[0]+side_x/7*6, deleteCoords[1]+side_y/7], 3)

    #--------------------------
    #money/wave/healths draw
    moneyValue = f1.render('Money: '+ str(money), 1, WHITE)
    screen.blit(moneyValue, (0, 0))

    waveValue = f1.render('wave: '+ str(wave), 1, WHITE)
    screen.blit(waveValue, (200, 0))

    healthsValue = f1.render('healths: '+ str(healths), 1, WHITE)
    screen.blit(healthsValue, (400, 0))
    #--------------------------
    #healths and timer
    if healths <= 0:
        done = True
        print("You lose")

        
    if fakeTimer == 0:
        fakeTimer = 60
    else:
        fakeTimer -= 1
    #--------------------------
    #wave switching
    if len(enemies) == 0 and wave == 1:
        enemyCount += 6
        wave += 1
        maxEnemyHealts = 5
        enemies.append(Enemy(start[0], start[1], maxEnemyHealts, 0))
        iterator = -1
    elif len(enemies) == 0 and wave == 2:
        enemyCount += 9
        wave += 1
        maxEnemyHealts = 8
        enemies.append(Enemy(start[0], start[1], maxEnemyHealts, 0))
        iterator = -1
    elif len(enemies) == 0 and wave == 3:
        enemyCount += 12
        wave += 1
        maxEnemyHealts = 11
        enemies.append(Enemy(start[0], start[1], maxEnemyHealts, 0))
        iterator = -1
    elif len(enemies) == 0 and wave == 4:
        maxEnemyHealts = 40
        enemies.append(Enemy(start[0], start[1], maxEnemyHealts, 0))
        wave += 1
        iterator = -1
    elif len(enemies) == 0 and wave == 5:
        wave = "Victory!"
        print("You win!")
        done = True
    #--------------------------
    pygame.display.flip()
    clock.tick(60)

#--------------------------
#fireworks section
colors = [GREEN, RED, YELLOW, BLUE]
firework = []
firework2 = []
firework3 = []
firework4 = []
firework5 = []
firework6 = []

flying = 0

for i in range(0, 8):
    firework.append(FireworkPart(100, 500, random.choice(colors)))
    firework2.append(FireworkPart(200, 500, random.choice(colors)))
    firework3.append(FireworkPart(300, 500, random.choice(colors)))
    firework4.append(FireworkPart(400, 500, random.choice(colors)))
    firework5.append(FireworkPart(500, 500, random.choice(colors)))
    firework6.append(FireworkPart(600, 500, random.choice(colors)))

done = False

section = 1
while not done:
    for i in pygame.event.get():
        if i.type == pygame.QUIT: done = True

    
    screen.fill((0, 0, 0))

    #section 1:creating
    if section == 1:
        xRand = random.randint(20, screen_width-20)
        for i in firework:
            i.x = xRand
            i.y = 500
            i.color = random.choice(colors)

        xRand = random.randint(20, screen_width-20)
        for i in firework2:
            i.x = xRand
            i.y = 500
            i.color = random.choice(colors)

        xRand = random.randint(20, screen_width-20)
        for i in firework3:
            i.x = xRand
            i.y = 500
            i.color = random.choice(colors)

        xRand = random.randint(20, screen_width-20)
        for i in firework4:
            i.x = xRand
            i.y = 500
            i.color = random.choice(colors)

        xRand = random.randint(20, screen_width-20)
        for i in firework5:
            i.x = xRand
            i.y = 500
            i.color = random.choice(colors)

        xRand = random.randint(20, screen_width-20)
        for i in firework6:
            i.x = xRand
            i.y = 500
            i.color = random.choice(colors)
            
        section = 2
        
    #section 2:flying up
    if section == 2:
        if flying < 60:
            for i in firework:
                i.move(0, -5)
                
            for i in firework2:
                i.move(0, -5)

            for i in firework3:
                i.move(0, -5)

            for i in firework4:
                i.move(0, -5)

            for i in firework5:
                i.move(0, -5)

            for i in firework6:
                i.move(0, -5)
                
            flying += 1
        else:
            flying = 0
            section = 3
    #section 3:blowing
    if section == 3:
        if flying < 50:
            firework[0].move(1, -1)
            firework[1].move(1, 0)
            firework[2].move(1, 1)
            firework[3].move(0, 1)
            firework[4].move(-1, 1)
            firework[5].move(-1, 0)
            firework[6].move(-1, -1)
            firework[7].move(0, -1)

            firework2[0].move(1, -1)
            firework2[1].move(1, 0)
            firework2[2].move(1, 1)
            firework2[3].move(0, 1)
            firework2[4].move(-1, 1)
            firework2[5].move(-1, 0)
            firework2[6].move(-1, -1)
            firework2[7].move(0, -1)

            firework3[0].move(1, -1)
            firework3[1].move(1, 0)
            firework3[2].move(1, 1)
            firework3[3].move(0, 1)
            firework3[4].move(-1, 1)
            firework3[5].move(-1, 0)
            firework3[6].move(-1, -1)
            firework3[7].move(0, -1)

            firework4[0].move(1, -1)
            firework4[1].move(1, 0)
            firework4[2].move(1, 1)
            firework4[3].move(0, 1)
            firework4[4].move(-1, 1)
            firework4[5].move(-1, 0)
            firework4[6].move(-1, -1)
            firework4[7].move(0, -1)

            firework5[0].move(1, -1)
            firework5[1].move(1, 0)
            firework5[2].move(1, 1)
            firework5[3].move(0, 1)
            firework5[4].move(-1, 1)
            firework5[5].move(-1, 0)
            firework5[6].move(-1, -1)
            firework5[7].move(0, -1)

            firework6[0].move(1, -1)
            firework6[1].move(1, 0)
            firework6[2].move(1, 1)
            firework6[3].move(0, 1)
            firework6[4].move(-1, 1)
            firework6[5].move(-1, 0)
            firework6[6].move(-1, -1)
            firework6[7].move(0, -1)
            
            flying += 1
        else:
            flying = 0
            section = 4
    #section 4:invisible
    if section == 4:
        if flying < 10:
            flying += 1
        else:
            flying = 0
            section = 1
    #drawing
    if section != 4 and section != 1:
        for i in firework:
            i.draw()

        for i in firework2:
            i.draw()

        for i in firework3:
            i.draw()

        for i in firework4:
            i.draw()

        for i in firework5:
            i.draw()

        for i in firework6:
            i.draw()
    #end
    f2 = pygame.font.Font(None, 100)
    description2 = f2.render('VICTORY!', 1, WHITE)
    screen.blit(description2, (300, 80))
    pygame.display.flip()
    clock.tick(60)
#--------------------------

pygame.quit()
